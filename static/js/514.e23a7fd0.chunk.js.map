{"version":3,"file":"static/js/514.e23a7fd0.chunk.js","mappings":"kNACA,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,0B,mBCSnKA,EAAa,SAACC,GACDA,EAAMC,GAC9B,OACE,gBAAKC,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAjC,UACE,SAAC,KAAD,CAASC,GAAG,OAAZ,SAAoBJ,EAAMK,UCNnBC,EAAU,SAACN,IACDO,EAAAA,EAAAA,QAA4B,MACjD,OACI,0BACG,gBAAKL,UAAWC,EAAAA,OAAhB,SAA2BH,EAAMQ,a,uCCHpCC,GAAcC,EAAAA,EAAAA,GAAiB,IAkBxBC,GAAsBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,wBAA/BD,EAhB+B,SAACZ,GAC/D,OACI,kBAAMc,SAAUd,EAAMe,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EACXC,SAAY,CAACC,EAAAA,EAASX,GACtBJ,KAAK,kBACLgB,YAAY,0BAEvB,0BACI,6C,iCCZVC,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SCO3B,IAcA,GAAeE,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAPkB,SAACJ,GACnB,MAAO,CACHK,YAAaL,EAAMK,gBAVF,SAACC,GACtB,MAAO,CACHC,YAAa,SAACC,GACVF,GAASG,EAAAA,EAAAA,GAAmBD,SAapCE,EAAAA,IDnBG,SAA6BC,GAYhC,OADiCP,EAAAA,EAAAA,IAAQL,EAARK,EATP,SAAC3B,GAEvB,IAAKwB,EAAwBxB,EAAxBwB,OAAWW,GAAhB,OAA6BnC,EAA7B,GAEA,OAAKwB,GAEE,SAACU,GAAD,UAAeC,KAFF,SAAC,KAAD,CAAU/B,GAAI,gBCW1C,EClBuB,SAACJ,GACpB,IAAIuB,EAAQvB,EAAM4B,YAEdQ,EAAkBb,EAAMc,QAAQC,KAAI,SAACC,GAAD,OAAuB,SAACxC,EAAD,CAAYM,KAAMkC,EAAElC,KAAiBJ,GAAIsC,EAAEtC,IAAZsC,EAAEtC,OAC5FuC,EAAmBjB,EAAMkB,SAASH,KAAI,SAACI,GAAD,OAAoB,SAACpC,EAAD,CAASE,QAASkC,EAAElC,SAAckC,EAAEzC,OAMlG,OACI,iBAAKC,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,aAAhB,SACKiC,KAEL,gBAAKlC,UAAWC,EAAAA,SAAhB,UACI,yBAAMqC,OAEV,SAAC7B,EAAD,CAAqBG,SAZT,SAAC6B,GACjB3C,EAAM8B,YAAYa,EAAOZ","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Message/AddMassageForm.tsx","components/hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__HR0Co\",\"dialogsItems\":\"Dialogs_dialogsItems__2xKqQ\",\"active\":\"Dialogs_active__TxP4A\",\"messages\":\"Dialogs_messages__uemcq\",\"message\":\"Dialogs_message__59qrT\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\n\r\ntype DialogItemType = {\r\n  id: number\r\n  name: string\r\n}\r\n\r\nexport const DialogItem = (props: DialogItemType) => {\r\n  let path = \"/dialogs\" + props.id;\r\n  return (\r\n    <div className={s.dialog + ' ' + s.active}>\r\n      <NavLink to='path'>{props.name}</NavLink>\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React, { useRef } from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\n\r\ntype MessageType = {\r\n  message: string\r\n}\r\n\r\nexport const Message = (props: MessageType) => {\r\n  let newPostElement = useRef<HTMLTextAreaElement>(null);\r\n  return (\r\n      <div>\r\n         <div className={s.dialog}>{props.message}</div>\r\n      </div>\r\n\r\n\r\n  )\r\n}","import React from 'react';\r\nimport {reduxForm,InjectedFormProps, Field} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\ntype FormDataType = {\r\n    message: string\r\n}\r\n\r\nconst maxlength50 = maxLengthCreator(50)\r\n\r\nconst AddMassageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       validate = {[required,maxlength50]}\r\n                       name=\"newMessagesBody\"\r\n                       placeholder=\"Enter your message\"/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport const AddMassageFormRedux = reduxForm<FormDataType>({form: 'dialogAddMassageForm'})(AddMassageForm)","import React, {ComponentType} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}\r\n\r\n","import React from 'react';\r\nimport {sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withRouter} from \"react-router\";\r\nimport {Dialogs} from './Dialogs';\r\nimport {withAuthRedirect} from \"../hoc/withAuthRedirect\";\r\nimport {DialogsPageType} from \"../../redux/store\";\r\n\r\ntype MapStateToProps = {\r\n    dialogsPage: DialogsPageType\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    sendMessage: (newMessagesBody: string) => void\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\r\n    return {\r\n        sendMessage: (newMessagesBody: string) => {\r\n            dispatch(sendMessageCreator(newMessagesBody))\r\n        },\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToProps => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport {DialogItem} from \"./DialogItem/DialogsItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogItemType, DialogsPageType, MessageType} from \"../../redux/store\";\r\nimport {AddMassageFormRedux} from \"./Message/AddMassageForm\";\r\n\r\ntype PropsType = {\r\n    sendMessage: (newMessagesBody: string) => void\r\n    updateNewMessageBody: (body: string) => void\r\n    dialogsPage: DialogsPageType\r\n    isAuth: boolean\r\n}\r\n\r\nexport const Dialogs = (props: PropsType) => {\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogs.map((d: DialogItemType) => <DialogItem name={d.name} key={d.id} id={d.id}/>)\r\n    let messagesElements = state.messages.map((m: MessageType) => <Message message={m.message} key={m.id}/>)\r\n\r\n    let addNewMessage = (values: any) => {\r\n        props.sendMessage(values.newMessagesBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n            </div>\r\n            <AddMassageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n/*\r\ntype FormDataType = {\r\n    message: string\r\n}\r\n\r\nconst AddMassageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component=\"textarea\" name=\"newMessagesBody\" placeholder=\"Enter your message\"/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst AddMassageFormRedux = reduxForm<FormDataType>({form: 'dialogAddMassageForm'})(AddMassageForm)*/\r\n"],"names":["DialogItem","props","id","className","s","to","name","Message","useRef","message","maxlength50","maxLengthCreator","AddMassageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","mapStateToProps","state","isAuth","auth","compose","connect","dialogsPage","dispatch","sendMessage","newMessagesBody","sendMessageCreator","withRouter","Component","restProps","dialogsElements","dialogs","map","d","messagesElements","messages","m","values"],"sourceRoot":""}